# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from myserial/myserialsrvRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class myserialsrvRequest(genpy.Message):
  _md5sum = "7e8ab01964adad3e006b48c1a37034a8"
  _type = "myserial/myserialsrvRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 A1
float32 A2
float32 A3
float32 A4
float32 A5
float32 A6
float32 A7
float32 A8
float32 A9
"""
  __slots__ = ['A1','A2','A3','A4','A5','A6','A7','A8','A9']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       A1,A2,A3,A4,A5,A6,A7,A8,A9

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(myserialsrvRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.A1 is None:
        self.A1 = 0.
      if self.A2 is None:
        self.A2 = 0.
      if self.A3 is None:
        self.A3 = 0.
      if self.A4 is None:
        self.A4 = 0.
      if self.A5 is None:
        self.A5 = 0.
      if self.A6 is None:
        self.A6 = 0.
      if self.A7 is None:
        self.A7 = 0.
      if self.A8 is None:
        self.A8 = 0.
      if self.A9 is None:
        self.A9 = 0.
    else:
      self.A1 = 0.
      self.A2 = 0.
      self.A3 = 0.
      self.A4 = 0.
      self.A5 = 0.
      self.A6 = 0.
      self.A7 = 0.
      self.A8 = 0.
      self.A9 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9f().pack(_x.A1, _x.A2, _x.A3, _x.A4, _x.A5, _x.A6, _x.A7, _x.A8, _x.A9))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.A1, _x.A2, _x.A3, _x.A4, _x.A5, _x.A6, _x.A7, _x.A8, _x.A9,) = _get_struct_9f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9f().pack(_x.A1, _x.A2, _x.A3, _x.A4, _x.A5, _x.A6, _x.A7, _x.A8, _x.A9))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.A1, _x.A2, _x.A3, _x.A4, _x.A5, _x.A6, _x.A7, _x.A8, _x.A9,) = _get_struct_9f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9f = None
def _get_struct_9f():
    global _struct_9f
    if _struct_9f is None:
        _struct_9f = struct.Struct("<9f")
    return _struct_9f
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from myserial/myserialsrvResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class myserialsrvResponse(genpy.Message):
  _md5sum = "49ce2fd0a53e99aa800d1c6398f8efd8"
  _type = "myserial/myserialsrvResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 B1
float32 B2
float32 B3
float32 B4
float32 B5
float32 B6
float32 B7
float32 B8
float32 B9


"""
  __slots__ = ['B1','B2','B3','B4','B5','B6','B7','B8','B9']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       B1,B2,B3,B4,B5,B6,B7,B8,B9

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(myserialsrvResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.B1 is None:
        self.B1 = 0.
      if self.B2 is None:
        self.B2 = 0.
      if self.B3 is None:
        self.B3 = 0.
      if self.B4 is None:
        self.B4 = 0.
      if self.B5 is None:
        self.B5 = 0.
      if self.B6 is None:
        self.B6 = 0.
      if self.B7 is None:
        self.B7 = 0.
      if self.B8 is None:
        self.B8 = 0.
      if self.B9 is None:
        self.B9 = 0.
    else:
      self.B1 = 0.
      self.B2 = 0.
      self.B3 = 0.
      self.B4 = 0.
      self.B5 = 0.
      self.B6 = 0.
      self.B7 = 0.
      self.B8 = 0.
      self.B9 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9f().pack(_x.B1, _x.B2, _x.B3, _x.B4, _x.B5, _x.B6, _x.B7, _x.B8, _x.B9))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.B1, _x.B2, _x.B3, _x.B4, _x.B5, _x.B6, _x.B7, _x.B8, _x.B9,) = _get_struct_9f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9f().pack(_x.B1, _x.B2, _x.B3, _x.B4, _x.B5, _x.B6, _x.B7, _x.B8, _x.B9))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.B1, _x.B2, _x.B3, _x.B4, _x.B5, _x.B6, _x.B7, _x.B8, _x.B9,) = _get_struct_9f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9f = None
def _get_struct_9f():
    global _struct_9f
    if _struct_9f is None:
        _struct_9f = struct.Struct("<9f")
    return _struct_9f
class myserialsrv(object):
  _type          = 'myserial/myserialsrv'
  _md5sum = '8201a68440ff5daa0bba491b406dad47'
  _request_class  = myserialsrvRequest
  _response_class = myserialsrvResponse
