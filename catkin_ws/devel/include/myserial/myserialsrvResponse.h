// Generated by gencpp from file myserial/myserialsrvResponse.msg
// DO NOT EDIT!


#ifndef MYSERIAL_MESSAGE_MYSERIALSRVRESPONSE_H
#define MYSERIAL_MESSAGE_MYSERIALSRVRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace myserial
{
template <class ContainerAllocator>
struct myserialsrvResponse_
{
  typedef myserialsrvResponse_<ContainerAllocator> Type;

  myserialsrvResponse_()
    : B1(0.0)
    , B2(0.0)
    , B3(0.0)
    , B4(0.0)
    , B5(0.0)
    , B6(0.0)
    , B7(0.0)
    , B8(0.0)
    , B9(0.0)  {
    }
  myserialsrvResponse_(const ContainerAllocator& _alloc)
    : B1(0.0)
    , B2(0.0)
    , B3(0.0)
    , B4(0.0)
    , B5(0.0)
    , B6(0.0)
    , B7(0.0)
    , B8(0.0)
    , B9(0.0)  {
  (void)_alloc;
    }



   typedef float _B1_type;
  _B1_type B1;

   typedef float _B2_type;
  _B2_type B2;

   typedef float _B3_type;
  _B3_type B3;

   typedef float _B4_type;
  _B4_type B4;

   typedef float _B5_type;
  _B5_type B5;

   typedef float _B6_type;
  _B6_type B6;

   typedef float _B7_type;
  _B7_type B7;

   typedef float _B8_type;
  _B8_type B8;

   typedef float _B9_type;
  _B9_type B9;





  typedef boost::shared_ptr< ::myserial::myserialsrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::myserial::myserialsrvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct myserialsrvResponse_

typedef ::myserial::myserialsrvResponse_<std::allocator<void> > myserialsrvResponse;

typedef boost::shared_ptr< ::myserial::myserialsrvResponse > myserialsrvResponsePtr;
typedef boost::shared_ptr< ::myserial::myserialsrvResponse const> myserialsrvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::myserial::myserialsrvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::myserial::myserialsrvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace myserial

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'myserial': ['/home/ubuntu/catkin_ws/src/myserial/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::myserial::myserialsrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::myserial::myserialsrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::myserial::myserialsrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::myserial::myserialsrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::myserial::myserialsrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::myserial::myserialsrvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::myserial::myserialsrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "49ce2fd0a53e99aa800d1c6398f8efd8";
  }

  static const char* value(const ::myserial::myserialsrvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x49ce2fd0a53e99aaULL;
  static const uint64_t static_value2 = 0x800d1c6398f8efd8ULL;
};

template<class ContainerAllocator>
struct DataType< ::myserial::myserialsrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "myserial/myserialsrvResponse";
  }

  static const char* value(const ::myserial::myserialsrvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::myserial::myserialsrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 B1\n\
float32 B2\n\
float32 B3\n\
float32 B4\n\
float32 B5\n\
float32 B6\n\
float32 B7\n\
float32 B8\n\
float32 B9\n\
\n\
\n\
";
  }

  static const char* value(const ::myserial::myserialsrvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::myserial::myserialsrvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.B1);
      stream.next(m.B2);
      stream.next(m.B3);
      stream.next(m.B4);
      stream.next(m.B5);
      stream.next(m.B6);
      stream.next(m.B7);
      stream.next(m.B8);
      stream.next(m.B9);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct myserialsrvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::myserial::myserialsrvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::myserial::myserialsrvResponse_<ContainerAllocator>& v)
  {
    s << indent << "B1: ";
    Printer<float>::stream(s, indent + "  ", v.B1);
    s << indent << "B2: ";
    Printer<float>::stream(s, indent + "  ", v.B2);
    s << indent << "B3: ";
    Printer<float>::stream(s, indent + "  ", v.B3);
    s << indent << "B4: ";
    Printer<float>::stream(s, indent + "  ", v.B4);
    s << indent << "B5: ";
    Printer<float>::stream(s, indent + "  ", v.B5);
    s << indent << "B6: ";
    Printer<float>::stream(s, indent + "  ", v.B6);
    s << indent << "B7: ";
    Printer<float>::stream(s, indent + "  ", v.B7);
    s << indent << "B8: ";
    Printer<float>::stream(s, indent + "  ", v.B8);
    s << indent << "B9: ";
    Printer<float>::stream(s, indent + "  ", v.B9);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MYSERIAL_MESSAGE_MYSERIALSRVRESPONSE_H
